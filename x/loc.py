#
# Copyright 2018 justworx
# This file is part of the trix project, distributed under
# the terms of the GNU Affero General Public License.
#

from .. import *
import locale


class BaseLocale(object):
	"""Base for SysLoc subclass and, potentially, future variants."""
	
	def __init__(self, loc_data):
		"""
		Pass a dict `loc_data` as generated by trix.app.cline.loc or
		the assets locale_json file.
		"""
		# add each loc_data value as an object member variable
		self.__locdata = loc_data
		for v in loc_data:
			self.__dict__[v] = loc_data[v]
	
	def __getitem__(self, key):
		"""Return locale format by name `key`."""
		return self.__locdata[key]
	
	def keys(self):
		"""Return dict of locale data."""
		return list(self.__locdata.keys())
	
	def locdata(self):
		"""Return dict of locale data."""
		return self.__locdata
	
	def display(self):
		"""Display JSON representation of locale data."""
		trix.display(self.__locdata)
	
	#
	# I suppose I'll try to place formatting methods here (below).
	# That may take a while to figure out.
	#
	# For now, the format strings seem like a good start.
	#



class Locale(BaseLocale):
	
	AssetPath = '%s/assets/locale_json.tar.gz' % DEF_CACHE
	
	def __init__(self, loc_str):
		"""
		Pass a locale description string. Returns a dict containing
		locale format data.
		
		The `loc_str` argument must be a string in the following format:
		 * langcode_country.endocing
		 * Eg., "en_US.utf_8"
		
		"""
		try:
			#
			# This will fail on first call, so will be handled below. On
			# subsequent calls, it will succeed here.
			# 
			BaseLocale.__init__(self, Locale.__qdict(loc_str))
		except:
			# here's why it will succeed on subsequent calls...
			try:
				# try to use asset locale data if possible...
				Locale.__qdict = Locale.query_asset_dict
			except:
				# otherwise, query the local system for locale data
				Locale.__qdict = Locale.query_locale_dict
			
			# here's the initialization for the first call
			BaseLocale.__init__(self, Locale.__qdict(loc_str))
	
		
	@classmethod
	def query_asset_dict(cls, loc_str):
		"""Query locale dict from assets."""
		j = trix.path(cls.AssetPath).wrapper().read(loc_str)
		return trix.jparse(j)
	
	@classmethod
	def query_locale_dict(cls, loc_str):
		"""Query locale dict from system locale data."""
		cline = "%s -m %s loc -c %s" % (
				sys.executable, trix.innerfpath(), loc_str
			)
		cx = trix.callx(cline)
		js = cx.reader().read()
		return trix.jparse(js)
