
# -------------------------------------------------------------------
#
# LOTSA PROBLEMS
#
# -------------------------------------------------------------------

Finding/Fixing lots of bugs while adding to the test scripts.



#
# WINDOWS PROBLEMS
#

I've recently gotten my old Windows PC running and started testing
trix there. Here are some notes to follow when coding:

 * There can be only one locale set on Windows. Even in subprocesses
   you can't `setlocale()` to anything but the locale selected in
   Windows' system preferences.
   
   Even if this is no longer true, there are probably lots of older 
   PCs still in use. I don't see the profit (for MS) in fixing this
   deficiency, so I'll assume for now it hasn't (and never will) 
   change.
   
   If I can figure out all the formatting, I could build a set of JSON
   files and use those on windows to handle many, if not all, of the
   translations for all locales.
 
 * Don't put `assert` in a lambda. It causes an exception on Windows.
   I'll have to find another way around this - haven't thought about 
   how to do it yet.

The above list is from only a few minutes of testing. I can't imagine
what I'm going to face when I jump into it seriously. I may just have
to present trix as a linux-only app. Guess we'll see.




# -------------------------------------------------------------------
#
# OUTPUT RULES
#
# -------------------------------------------------------------------

I need to create (and implement) some rules regarding writing 
output. It's going to cause some fairly significant changes in 
behavior, but that's what rough drafts are for I guess.

REMEMBER: THESE ARE NOT FULLY IMPLEMENTED (AND MIGHT NEVER BE).

Tentative Rules:
 * `output` methods rely on util.output and only print output when
   the Output.paused class variable is set to False. When paused,
   any given output is buffered and printed when pause is changed
   to False.
 * `write` always writes immediately to a stream.
 * `display` always prints immediately to the terminal... I think.

There are a lot of classes that use these names in various ways.
I want to edit each of them to make sure they're consistent in
future versions - and that they each have as many as possible of
the three output-related terms.




# -------------------------------------------------------------------
#
# UTIL - Import Consistency
#
# -------------------------------------------------------------------

~ Some modules in the util package import other trix modules from 
~ outside util. For now, it's only ok for util modules to import 
~ from `trix` and `trix.fmt`. I've moved the following from util 
~ to `trix.app`: [event, process, jconfig]

  RELOCATION REFUSED! REDACTED - RECANTED - REGRETED. (REWOUND?)

I don't like that util is importing modules from other packages, but
changing that now is too difficult. I'll try to reorganize slowly,
over time. For now, the event, process, and jconfig modules are back
in util.




#
# FMT - sigh...
#
I'm considering moving fmt to util. I wish I'd put it there in the
beginning. I'm considering some serious changes to `fmt`. I've 
recently realized that the Grid and Table classes are misnamed - 
their names should be switched (which would require careful 
examination of all code!) They, and List, need a lot of improvements,
too - all needing a "Cell" system to provide better formatting and 
more understandable code.




# -------------------------------------------------------------------
#
# APP.TEST
#
# -------------------------------------------------------------------

There's a good start here, but still many modules to cover, and the
ones currently covered don't do complete tests of all features. This
project is going to take a long time to finish.

You can run the test using python 2 or 3. Eg.,
```
python3
import trix.test.testall

```

You can also test using `python -m trix test`.

It's probably easiest to use the x/test.sh script (see below).




# -------------------------------------------------------------------
#
# SCRIPTS
#
# -------------------------------------------------------------------

I've added a few scripts that I find very useful. I've placed them in
the `x` directory for now.
 
1) pull.sh pulls the latest changes from the git server.
   
   ```
   cd trix
   sh ./x/pull.sh
   ```
  
2) test.sh runs the current app.test suite in python3 then python2.
   Any exception
   will cause the script to stop running.
   
   ```
   cd trix
   sh ./x/test.sh
   ```
  
3) clean.sh clears out all the .pyc files and __pycache__ directories,
   which is very nice after running test.sh!
   
   ```
   cd trix
   sh ./x/clean.sh
   ```



