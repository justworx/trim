
# -------------------------------------------------------------------
#
# LOTSA PROBLEMS
#
# -------------------------------------------------------------------

Finding/Fixing lots of bugs while adding to the test script.


...EVENTUALLY NEED TO SOLVE
 
 * THE LOCALE STUFF
 * URL.HEAD
 * SIGNALS





# -------------------------------------------------------------------
#
# OUTPUT RULES
#
# -------------------------------------------------------------------

I need to create (and implement) some rules regarding writing 
output. It's going to cause some fairly significant changes in 
behavior, but that's what rough drafts are for I guess.

Tentative Rules:
 * output methods rely on util.output and only print output when
   the Output.paused class variable is set to True. When False
   any given output is buffered and printed when pause is changed
   to True.
 * write always writes immediately to a stream.
 * display always prints immediately to the terminal... I think.

There are a lot of classes that use these names in various ways.
I want to edit each of them to make sure they're consistent in
future versions - and that they each have as many as possible of
the three output-related terms.




# -------------------------------------------------------------------
#
# UTIL - Import Consistency
#
# -------------------------------------------------------------------

Some modules in the util package import other trix modules from 
outside util. For now, it's only ok for util modules to import 
from `trix` and `trix.fmt`. I've moved the following from util 
to `trix.app`: [event, process, jconfig]

#
# FMT - sigh...
#
I'm considering moving fmt to util. I wish I'd put it there in the
beginning. I'm considering some serious changes to `fmt`. I've 
recently realized that the Grid and Table classes are misnamed - 
their names should be switched (which would require careful 
examination of all code!) They, and List, need a lot of improvements,
too - all needing a "Cell" system to provide better formatting and 
more understandable code.




# -------------------------------------------------------------------
#
# APP.TEST
#
# -------------------------------------------------------------------

There's a good start here, but still many modules to cover, and the
ones currently covered don't do complete tests of all features. This
project is going to take a long time to finish.

You can run the test using python 2 or 3. Eg.,
```
python3
import trix.test

```

You can also test using `python -m trix test`.

It's probably easiest to use the x/test.sh script (see below).




# -------------------------------------------------------------------
#
# SCRIPTS
#
# -------------------------------------------------------------------

I've added a few scripts that I find very useful. I've placed them in
the `x` directory for now.
 
1) pull.sh pulls the latest changes from the git server.
   
   ```
   cd trix
   sh ./x/pull.sh
   ```
  
2) test.sh runs the current app.test suite in python3 then python2.
   Any exception
   will cause the script to stop running.
   
   ```
   cd trix
   sh ./x/test.sh
   ```
  
3) clean.sh clears out all the .pyc files and __pycache__ directories,
   which is very nice after running test.sh!
   
   ```
   cd trix
   sh ./x/clean.sh
   ```



