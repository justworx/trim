#
# Copyright 2019 justworx
# This file is part of the trix project, distributed under 
# the terms of the GNU Affero General Public License.
#


from .propseq import *


# -------------------------------------------------------------------
#
#
# PROP-LIST
#
#
# -------------------------------------------------------------------

class proplist(propseq):
	"""
	Wrap objects in a proplist to provide a variety of useful features
	for manipulation and display.
	"""
	
	def __getitem__(self, key):
		return type(self)(self.o[key])
	
	def __setitem__(self, key, v):
		self.o[key] = v
	
	@property
	def data(self):
		"""
		Returns the list self.o. 
		
		This is used in display methods so that subclasses can override
		it to extract the column heading item - self.o[0] - so that its
		not affected by proplist methods for sorting, selection, etc...
		
		This is currently very important to propgrid, which undertakes
		to display and manipulate database query results without having
		to worry about the column headings causing problems.
		"""
		return self.o
	
	@data.setter
	def data(self, d):
		"""
		Set the data portion of this object (not affecting the header).
		"""
		self.o = d
	
	@property
	def sorted(self):
		"""
		Return a proplist with sorted content.
		"""
		return type(self)(sorted(self.data))
	
	@property
	def reversed(self):
		"""Return a proplist with reversed content."""
		return type(self)(reversed(self.data))
	
	@property
	def lines(self):
		"""Generate string items (lines)."""
		for line in self.data:
			yield (str(line))
	
	
	#
	#
	# SIMPLE - iterators, data values
	#
	#
	def filter(self, fn, *a, **k):
		"""
		Pass callable `fn` that returns False for items that should not
		be selected. Optional args/kwargs are received by fn.
		
		Returns filter object.
		"""
		return filter(fn, self.data, *a, **k)
	
	
	def filtered(self, fn, *a, **k):
		"""
		Return a proplist containing results filtered by function `fn`.
		
		```
		d = trix.path('~').dir()
		d.list.filtered(lambda x: x[1]=='f').o
		```
		"""
		return proplist(list(self.filter(fn,*a,**k)))
	
	
	#
	#
	# COMPLEX - Use, select, and manipulate list data.
	#
	#	
	def each (self, fn, *a, **k):
		"""
		Argument `fn` is a callable that operates on items from `self.o` 
		in place, one item at a time. 
		
		Returns `self`.
		"""
		for v in self.o:
			fn(v, *a, **k)
		return self
	
	
	def select (self, fn, *a, **k):
		"""
		Argument `fn` is a callable that selects/alters and then returns
		items one at a time, storing them in a result list.
		
		Returns the result list.
		
		```
		from trix.propx import *
		pl = proplist([1,2,3])
		pl.select(lambda o: o*9) 
		```
		"""
		r = []
		for v in self.data:
			r.append(fn(v, *a, **k))
		return r
	
	
	def update (self, fn, *a, **k):
		"""
		Create an updated copy of `self.data` one item at a time and then
		replace `self.data` with the result. 
		
		Returns `self`.
		
		```
		from trix.propx import *
		pl = proplist(trix.path('trix').grid.)
		pl.select(lambda o: o*9) 
		```
		"""
		self.data = self.select(fn, *a, **k)
		return self
	
	
	#
	#
	# DISPLAY
	#  - Display lists as json or in grids/tables/lists
	#
	#
	def grid(self, *a, **k):
		"""Display as Grid."""
		k['f'] = 'Grid'
		trix.display(self.o, *a, **k)
	
	def list(self, *a, **k):
		"""Display as List."""
		k['f'] = 'List'
		trix.display(self.o, *a, **k)
	
	def table(self, *a, **k):
		"""Display as Table. Pass keyword argument 'width'."""
		k['f'] = 'Table'
		trix.display(self.o, *a, **k)






# -------------------------------------------------------------------
#
#
# PROP-GRID 
#
#
# -------------------------------------------------------------------

class propgrid(proplist):
	"""
	The `propgrid` class separates a heading row from the data rows
	that follow. It's intended for data that consists of a list of
	equal-length lists, such as is generated by data.dbgrid.
	
	NOTE: data.dbgrid always prepends the header row to query results.
	      The 'header' kwarg is available in case we need to pass a
	      grid (list of lists) that does not come prepended with 
	      column titles.
	"""
	
	@property
	def h(self):
		"""
		Return this property's actual object value, as originally
		calculated by `self.__call__()`.
		"""
		try:
			return self.__h
		except:
			if self.k.get('heading'):
				self.__d = self.o
				self.__h = self.k.get('heading')
				self.__hh = True
			else:
				self.__d = self.o[1:]
				self.__h = self.o[0]
				self.__hh = False
			return self.__h
	
	
	@property
	def data(self):
		"""
		Returns the data portion of a grid (list of lists) excluding the
		header row, if it were prepended as the first item in the grid.
		"""
		# if this propgrid was given a heading, return self.o as data
		try:
			if self.__hh:
				return self.o
		except:
			self.h # call this simply to get values __h and __hh
			if self.__hh:
				return self.o
		
		# otherwise, data is just self.o[:1]
		return self.o[1:]
		
		#
		# BE AWARE: self.o may change. so the data must always be 
		#           recalculated when there's a heading prepended to
		#           self.o.
		#
	
	
	@property
	def data(self):
		"""
		Returns the data portion of a grid (list of lists) excluding the
		header row, if it were prepended as the first item in the grid.
		"""
		try:
			# subsequent calls simply return the data portion of the object
			return self.__d
		except:
			# calling for self.h causes self.__d to be initialized
			self.h
			return self.__d
	
	
	@property
	def rows(self):
		"""
		Returns all rows, including the header, as a list for display.
		"""
		return list(self.__rowgen)
	
	@property
	def __rowgen(self):
		#
		# Generates the header row and all data rows.
		#
		yield(self.h)
		for r in self.data:
			yield(r)
	
	def grid(self, *a, **k):
		"""Display as Grid."""
		k['f'] = 'Grid'
		trix.display(self.rows, *a, **k)
